JAR파일

활용
1. **애플리케이션 배포**: J
AR 파일은 Java 애플리케이션을 배포하는 표준 방식입니다. 애플리케이션이 필요로 하는 모든 파일(클래스 파일, 텍스트 파일, 이미지 등)을 하나의 JAR 파일로 묶어 쉽게 배포할 수 있습니다.
   
2. **라이브러리 패키징**: 
많은 Java 라이브러리들이 JAR 파일 형식으로 배포됩니다. 개발자는 이러한 라이브러리 JAR 파일을 프로젝트에 포함시켜 다양한 기능을 손쉽게 사용할 수 있습니다.

3. **클래스 로더(ClassLoader) 사용**: 
JAR 파일은 Java 가상 머신(JVM)에서 클래스 로딩 메커니즘과 통합되어 있습니다. 이를 통해 JVM은 애플리케이션을 실행할 때 JAR 파일 안에 있는 클래스를 자동으로 로드할 수 있습니다.

4. **애플릿(Applet) 및 웹 애플리케이션 배포**: 
JAR 파일은 웹 브라우저에서 실행되는 Java 애플릿을 배포하는 데에도 사용될 수 있습니다. 또한, 서블릿(Servlet)과 같은 Java 웹 애플리케이션 구성 요소를 묶어서 배포할 때도 자주 사용됩니다.

구조

- **.class 파일**: 컴파일된 Java 클래스 파일. JAR 파일의 주요 구성 요소입니다.

- **리소스 파일**: 애플리케이션에서 사용하는 이미지, 텍스트 파일, 프로퍼티 파일 등이 포함될 수 있습니다.

- **MANIFEST.MF 파일**: JAR 파일의 메타데이터를 저장하는 특별한 파일입니다. JAR 파일의 루트 디렉토리 안의 **META-INF** 폴더에 저장됩니다. 
이 파일에는 애플리케이션을 실행할 때 JVM이 참조해야 할 주요 정보가 포함됩니다. 
예를 들어, 메인 클래스(Main-Class)를 지정하여 `java -jar` 명령으로 JAR 파일을 실행할 수 있도록 설정할 수 있습니다.

생성하기
JAR 파일을 생성하기 위해서는 컴파일된 .class 파일들과 리소스 파일들을 준비한 후, `jar` 명령어를 사용합니다.

예를 들어, 다음과 같은 디렉토리 구조가 있다고 가정합니다:
```
/project
    /com
        /example
            Main.class
            Helper.class
    /resources
        config.properties
```

이 디렉토리에서 JAR 파일을 생성하는 명령어는 다음과 같습니다:
```bash
jar cvf app.jar -C /project .
```
- **`c`**: 새로운 JAR 파일을 생성하라는 뜻입니다.
- **`v`**: 생성 과정에서 처리된 파일 목록을 출력합니다.
- **`f`**: JAR 파일의 이름을 지정합니다.
- **`-C`**: 특정 디렉토리에서 파일을 가져오도록 지정합니다.
이 명령어는 `app.jar` 파일을 생성하며, 이 파일에는 **/project** 디렉토리 안의 모든 파일이 포함됩니다.

실행하기
JAR 파일이 생성되면, 이를 실행하기 위해 다음과 같은 명령어를 사용할 수 있습니다:
```bash
java -jar app.jar
```
이 명령어는 **MANIFEST.MF** 파일에 지정된 메인 클래스를 기반으로 애플리케이션을 실행합니다.

 